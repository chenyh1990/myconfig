" ------------------------------------------------------------------------------
" Exit when your app has already been loaded (or "compatible" mode set)
if exists("g:loaded_VLW_Windows") || &cp
  finish
endif
let g:loaded_VLW_Windows= 100 " your version number
let s:keepcpo           = &cpo
set cpo&vim


if !has('python')
    echo "Error: Required vim compiled with +python"
    finish
endif

if !exists('s:VLW_mupdf_pid')
  let s:VLW_mupdf_pid = '0'
endif


if !exists('g:VLW_mupdf_exepath')
  let g:VLW_mupdf_exepath = 'mupdf.exe'
endif

if !exists('g:VLW_temp_dir')
  let g:VLW_temp_dir = './vlw_temp'
endif

if !exists('g:VLW_CompileRule_pdf')
  if exists('g:Tex_CompileRule_pdf')
    let g:VLW_CompileRule_pdf = g:Tex_CompileRule_pdf
  else
    let g:VLW_CompileRule_pdf = 'pdflatex -interaction=nonstopmode'
  endif
endif

let s:VLW_mupdf_curpdf = ''

function! VLW_KillMupdf()
  exec 'silent !start /min taskkill /pid '.s:VLW_mupdf_pid
endfunction

function! VLW_ResetLayout()
python << EOF
import vim
import vim_latex
import ctypes
user32 = ctypes.windll.user32
screensize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)
w = screensize[0]/2
h = screensize[1] - 50
spid = vim.eval('s:VLW_mupdf_pid')
(mypid, mytitle) = vim_latex.pyvlw_native.getMyPID()
if spid != '0':
  vim_latex.pyvlw_native.setMupdfWindow(spid, w,0,w,h)
  vim_latex.pyvlw_native.setMupdfWindow(mypid,0,0,w,h)
EOF
endfunction

function! VLW_RefreshView(pdfname)
  if !filereadable(a:pdfname)
    echo 'Can not read "'.a:pdfname.'"'
    return
  endif
  if a:pdfname != s:VLW_mupdf_curpdf
    let s:VLW_mupdf_curpdf = a:pdfname
    call VLW_KillMupdf()
    let s:VLW_mupdf_pid = '0'
  endif
python << EOF
import vim
import vim_latex
spid = vim.eval('s:VLW_mupdf_pid')
ep   = vim.eval('g:VLW_mupdf_exepath')
fn   = vim.eval('s:VLW_mupdf_curpdf')
(spid,title) = vim_latex.refreshMupdf(ep,fn,spid)
vim.command('let s:VLW_mupdf_pid = "'+spid+'"')
if spid=='0':
  print 'Fail to run', ep
else:
  #vim_latex.pyvlw_native.setMupdfWindow(spid,0,0,100,100)
  vim_latex.pyvlw_native.sendKeystroke(spid, ord('R'))
  vim.command('call VLW_ResetLayout()')
EOF
  "echo s:VLW_mupdf_pid
endfunction

function! VLW_Info()
python << EOF
import vim_latex
vim_latex.printInfo()
EOF
endfunction

function! VLW_CompilePreview(envtype)
python << EOF
import vim
import vim_latex
vim_latex.extractCurrentEnv(vim.eval('a:envtype'))
vim_latex.compileTempTex()
EOF
endfunction

function! VLW_RreshPreview(envtype)
  call VLW_CompilePreview(a:envtype)
  call VLW_RefreshView(g:VLW_temp_dir.'/preview.pdf')  
endfunction

" key maps
nnoremap <buffer> <F8> :call VLW_RreshPreview('$section')<CR>
nnoremap <buffer> <C-F8> :call VLW_RreshPreview('$env')<CR>
" autocmd InsertEnter *.tex silent call VLW_RreshPreviewBG('env')
" autocmd VimLeave *.tex silent call killMupdf()

" ------------------------------------------------------------------------------
let &cpo= s:keepcpo
unlet s:keepcpo

